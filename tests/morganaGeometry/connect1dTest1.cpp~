/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <cmath>
#include <iostream>

#include <boost/mpi.hpp>
#include <boost/mpi/environment.hpp>
#include <boost/mpi/communicator.hpp>

#include "typesInterface.h"

#include "pMapItem.h"
#include "pMapItemShare.h"

#include "pGraph.hpp"

#include "geoShapes.h"
#include "mesh1d.hpp"
#include "connect1d.hpp"
#include "mesh1dGlobalManip.hpp"

// mpirun -np 2 ./bin/morgana

using namespace std;
using namespace boost::mpi;

int main(int argc, char *argv[])
{
  typedef linearLine           GEOSHAPE;
  typedef geoElement<GEOSHAPE> GEOELEMENT;
  typedef pMapItemShare        ELMAP;
  typedef pMapItem             NODEMAP;
  typedef mesh1d<GEOSHAPE,ELMAP,NODEMAP> MESH1D;
  
  environment  env(argc,argv);
  communicator world;
  
  assert(world.size() == 2);
  Teuchos::RCP<MESH1D> grid1d = Teuchos::rcp(new MESH1D);
  
  
  if(world.rank() == 0)
  {
    //Nodes
    pVect<point3d,NODEMAP> nodes;
    
    nodes.reserve(3);
    nodes.push_back(point3d(0.0, 0.0, 0.0),pMapItem(1,1,0));
    nodes.push_back(point3d(1.0, 0.0, 0.0),pMapItem(2,2,0));
    nodes.push_back(point3d(1.0, 1.0, 0.0),pMapItem(3,3,0));
    
    //Elements
    GEOELEMENT li(true);
    pGraph<GEOELEMENT,ELMAP,NODEMAP> elList;
    
    elList.reserve(2);
    li.setGeoId(1); li(1) = 1; li(2) = 2;
    elList.push_back(li, pMapItemShare(1,1,0,false,true));
    li.setGeoId(1); li(1) = 2; li(2) = 3;
    elList.push_back(li, pMapItemShare(2,2,0,false,true));
    
    //The grid2d
    grid1d->setNodes(nodes);
    grid1d->setElements(elList);
  }
  else
  {
    //Nodes    
    pVect<point3d,NODEMAP> nodes;
    
    nodes.reserve(3);
    nodes.push_back(point3d(0.0, 0.0, 0.0),pMapItem(1,1,1));
    nodes.push_back(point3d(1.0, 1.0, 0.0),pMapItem(2,3,1));
    nodes.push_back(point3d(0.0, 1.0, 0.0),pMapItem(3,4,1));
    
    //Elements
    GEOELEMENT li(true);
    pGraph<GEOELEMENT,ELMAP,NODEMAP> elList;
    
    elList.reserve(2);
    li.setGeoId(2); li(1) = 2; li(2) = 3;
    elList.push_back(li, pMapItemShare(1,3,1,false,true));
    li.setGeoId(2); li(1) = 3; li(2) = 1;
    elList.push_back(li, pMapItemShare(2,4,1,false,true));
    
    //The grid2d
    grid1d->setNodes(nodes);
    grid1d->setElements(elList);
  }
  
  grid1d->transferMap();
  
  //Grid1d checking
  mesh1dGlobalManip<GEOSHAPE,ELMAP,NODEMAP> checker1d(world);
  bool flag = checker1d.check(grid1d);
  
  world.barrier();  
  if(world.rank() == 0)
  { cout << "cheking grid1d : " << flag << endl; }
  sleep(1);
  
  world.barrier();  
  if(world.rank() == 1)
  { cout << "cheking grid1d : " << flag << endl; }
  sleep(1);
  
  
  //Connecting
  connect1d<GEOSHAPE,ELMAP,NODEMAP> connectGrid1d(world);
  connectGrid1d.setMesh1d(grid1d);
  connectGrid1d.buildConnectivity();
  
  
  world.barrier();
  if(world.rank() == 0)
  { 
    cout << "Vertex to vertex----------------------------------------" << endl;    
    cout << connectGrid1d.getVertexToVertex() << endl << endl;
    
    cout << "Vertex to element---------------------------------------" << endl;
    cout << connectGrid1d.getVertexToElement() << endl << endl;
    
    cout << "Element to element--------------------------------------" << endl;
    cout << connectGrid1d.getElementToElement() << endl << endl;
  }
  sleep(1);
  
  world.barrier();
  if(world.rank() == 1)
  { 
    cout << "Vertex to vertex----------------------------------------" << endl;    
    cout << connectGrid1d.getVertexToVertex() << endl << endl;
    
    cout << "Vertex to element---------------------------------------" << endl;
    cout << connectGrid1d.getVertexToElement() << endl << endl;
    
    cout << "Element to element--------------------------------------" << endl;
    cout << connectGrid1d.getElementToElement() << endl << endl;
  }
  sleep(1);
}


/* PID 0
cheking grid1d : 1
Vertex to vertex----------------------------------------
ROW
cheking grid1d : 1
1
 map:  pid: 0 lid: 1 gid: 1
 data: 
Num Connected  : 1
Connected Id's : 2 


2
 map:  pid: 0 lid: 2 gid: 2
 data: 
Num Connected  : 2
Connected Id's : 1 3 


3
 map:  pid: 0 lid: 3 gid: 3
 data: 
Num Connected  : 1
Connected Id's : 2 


COL
pid: 0 lid: 1 gid: 1
pid: 0 lid: 2 gid: 2
pid: 0 lid: 3 gid: 3



Vertex to element---------------------------------------
ROW
1
 map:  pid: 0 lid: 1 gid: 1
 data: 
Num Connected  : 1
Connected Id's : 1 


2
 map:  pid: 0 lid: 2 gid: 2
 data: 
Num Connected  : 2
Connected Id's : 1 2 


3
 map:  pid: 0 lid: 3 gid: 3
 data: 
Num Connected  : 1
Connected Id's : 2 


COL
pid: 0 lid: 1 gid: 1 shared: 0 owned 1
pid: 0 lid: 2 gid: 2 shared: 0 owned 1



Element to element--------------------------------------
ROW
1
 map:  pid: 0 lid: 1 gid: 1 shared: 0 owned 1
 data: 
Num Connected  : 1
Connected Id's : 2 


2
 map:  pid: 0 lid: 2 gid: 2 shared: 0 owned 1
 data: 
Num Connected  : 1
Connected Id's : 1 


COL
pid: 0 lid: 1 gid: 1 shared: 0 owned 1
pid: 0 lid: 2 gid: 2 shared: 0 owned 1
*/

/* PID 1
cheking grid1d : 1
cheking grid1d : 1
Vertex to vertex----------------------------------------
ROW
1
 map:  pid: 1 lid: 1 gid: 1
 data: 
Num Connected  : 1
Connected Id's : 3 


2
 map:  pid: 1 lid: 2 gid: 3
 data: 
Num Connected  : 1
Connected Id's : 3 


3
 map:  pid: 1 lid: 3 gid: 4
 data: 
Num Connected  : 2
Connected Id's : 2 1 


COL
pid: 1 lid: 1 gid: 1
pid: 1 lid: 2 gid: 3
pid: 1 lid: 3 gid: 4



Vertex to element---------------------------------------
ROW
1
 map:  pid: 1 lid: 1 gid: 1
 data: 
Num Connected  : 1
Connected Id's : 2 


2
 map:  pid: 1 lid: 2 gid: 3
 data: 
Num Connected  : 1
Connected Id's : 1 


3
 map:  pid: 1 lid: 3 gid: 4
 data: 
Num Connected  : 2
Connected Id's : 1 2 


COL
pid: 1 lid: 1 gid: 3 shared: 0 owned 1
pid: 1 lid: 2 gid: 4 shared: 0 owned 1



Element to element--------------------------------------
ROW
1
 map:  pid: 1 lid: 1 gid: 3 shared: 0 owned 1
 data: 
Num Connected  : 1
Connected Id's : 2 


2
 map:  pid: 1 lid: 2 gid: 4 shared: 0 owned 1
 data: 
Num Connected  : 1
Connected Id's : 1 


COL
pid: 1 lid: 1 gid: 3 shared: 0 owned 1
pid: 1 lid: 2 gid: 4 shared: 0 owned 1
*/
