/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <cmath>
#include <iostream>

#include "Teuchos_RCP.hpp"
#include "Teuchos_ScalarTraits.hpp"
#include "Epetra_Map.h"
#include "Epetra_MpiComm.h"
#include "Epetra_FEVector.h"

#include "typesInterface.hpp"
#include "pMapItem.h"
#include "pMapItemShare.h"
#include "pVect.hpp"
#include "pVectManip.hpp"
#include "pVectComm.hpp"
#include "pVectGlobalManip.hpp"

#include "epetraVector_to_pVect.hpp"
#include "epetraBlockMatrixAssemble.h"



//! Run with two processors
int main(int argc, char *argv[])
{
  //Startup  
  environment env(argc,argv);
  
  communicator world;
  Epetra_MpiComm epetraComm(MPI_COMM_WORLD);
  
  assert(world.size() == 2);
  
  
  //Maps
  int numRowA, numRowB;
  int numColA, numColB;
  
  if(world.rank() == 0) { numRowA = 3; numRowB = 2; }
  else                  { numRowA = 2; numRowB = 2; }
  
  if(world.rank() == 0) { numColA = 2; numColB = 1; }
  else                  { numColA = 1; numColB = 1; }
  
  int elementsRowA[numRowA];
  int elementsRowB[numRowB];
  int elementsColA[numColA];
  int elementsColB[numColB];
  
  if(world.rank() == 0)
  {
    elementsRowA[0] = 2;
    elementsRowA[1] = 3;
    elementsRowA[2] = 4;
    
    elementsRowB[0] = 2;
    elementsRowB[1] = 3;
    
    elementsColA[0] = 0;
    elementsColA[1] = 1;
    
    elementsColB[0] = 0;
  }
  else
  {
    elementsRowA[0] = 0;
    elementsRowA[1] = 1;
    
    elementsRowB[0] = 0;
    elementsRowB[1] = 1;
    
    elementsColA[0] = 2;
    
    elementsColB[0] = 1;
  }

  Epetra_Map rowMapA(-1,numRowA,elementsRowA,0,epetraComm);
  Epetra_Map rowMapB(-1,numRowB,elementsRowB,0,epetraComm);
  
  Epetra_Map colMapA(-1,numColA,elementsColA,0,epetraComm);
  Epetra_Map colMapB(-1,numColB,elementsColB,0,epetraComm);
  
  
  
  //EpetraBlockMatrixAssemble
  epetraBlockMatrixAssemble assembler(2,2);
  assembler.setEpetraComm(epetraComm);
  
  assembler.setRowMap(1,rowMapA);
  assembler.setRowMap(2,rowMapB);
  
  assembler.setColMap(1,colMapA);
  assembler.setColMap(2,colMapB);
  
  assembler.startup();
  
  typedef epetraBlockMatrixAssemble::RCP_MAP  RCP_MAP;
  
  RCP_MAP rowMap = assembler.getRowMap();
  RCP_MAP colMap = assembler.getColMap();
  
  cout << *rowMap << endl;
  cout << *colMap << endl;
}
