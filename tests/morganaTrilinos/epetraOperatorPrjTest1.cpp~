/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <cmath>
#include <iostream>

#include "Teuchos_RCP.hpp"
#include "Teuchos_ScalarTraits.hpp"
#include "Epetra_Map.h"
#include "Epetra_MpiComm.h"
#include "Epetra_FEVector.h"

#include "typesInterface.h"
#include "pMapItem.h"
#include "pMapItemShare.h"
#include "pVect.hpp"
#include "pVectManip.hpp"
#include "pVectComm.hpp"
#include "pVectGlobalManip.hpp"

#include "epetraMatrixManip.h"
#include "epetraOperatorPrj.h"


//! Run with two processors
int main(int argc, char *argv[])
{
  //Startup--------------------------------------------------------------------
  environment env(argc,argv);
  
  communicator world;
  Epetra_MpiComm epetraComm(MPI_COMM_WORLD);
  
  assert(world.size() == 2);
  
  
  //Maps-----------------------------------------------------------------------
  int numRow, numCol;
  
  if(world.rank() == 0) { numRow = 1; numCol = 2; }
  else                  { numRow = 1; numCol = 2; }
  
  int elRowMap[numRow];
  int elColMap[numCol];
  
  if(world.rank() == 0)
  {
    elRowMap[0] = 0;
    elColMap[0] = 0;
    elColMap[1] = 1;
  }
  else
  {
    elRowMap[0] = 1;
    elColMap[0] = 2;
    elColMap[1] = 3;
  }  
  
  Epetra_Map rowMap(-1,numRow,elRowMap,0,epetraComm);
  Epetra_Map colMap(-1,numCol,elColMap,0,epetraComm);
  
  //Matrix matrix--------------------------------------------------------------
  Epetra_CrsMatrix matrix(Copy, rowMap, 1);
  
  int length = 4;
  double values[length];
  int numEntries, row, indices[length];
  
  if(world.rank() == 0)
  {
    row = 0;
    numEntries = 2;
    indices[0] = 0; indices[1] = 2;
    values[0]  = 4;  values[1]  = 1;
    matrix.InsertGlobalValues(row, numEntries, values, indices);
  }
  else
  {
    row = 1;
    numEntries = 2;
    indices[0] = 1; indices[1] = 3;
    values[0]  = 1; values[1]  = 1;
    matrix.InsertGlobalValues(row, numEntries, values, indices);
   
  }

  matrix.FillComplete(colMap,rowMap);
  
  
  //Vector---------------------------------------------------------------------
  Epetra_MultiVector X(colMap,1), Y(colMap,1);
  X.SumIntoGlobalValue(0,0,1.0);
  X.SumIntoGlobalValue(1,0,0.5);
  X.SumIntoGlobalValue(2,0,1.0);
  X.SumIntoGlobalValue(3,0,0.5);
  
  //Parameters lists-----------------------------------------------------------
  Teuchos::RCP<Teuchos::ParameterList> solverList = Teuchos::rcp(new Teuchos::ParameterList() );
  solverList->set("Solver", belosGmres);
  solverList->set("Block Size", 1);
  solverList->set("Maximum Iterations", 1600);
  solverList->set("Convergence Tolerance", 1e-6);
  solverList->set("Verbosity", Belos::FinalSummary + Belos::Errors + Belos::Warnings);
  
  Teuchos::RCP<Teuchos::ParameterList> preconditionerList = Teuchos::rcp(new Teuchos::ParameterList);
  preconditionerList->set("precClass", precIfpack);
  preconditionerList->set("precType" , "ILUT");
  preconditionerList->set("schwarz: combine mode", "Add");
  preconditionerList->set("fact: drop tolerance" , 1e-9);
  preconditionerList->set("fact: level-of-fill"  , 4.0);
  preconditionerList->set("overlap"              , 1);
  
  //Test-----------------------------------------------------------------------
  epetraOperatorPrj projector(matrix);
  projector.buildPreconditioner(solverList,preconditionerList);
  projector.Apply(X,Y);
  
  cout << endl << endl << Y << endl;
}
