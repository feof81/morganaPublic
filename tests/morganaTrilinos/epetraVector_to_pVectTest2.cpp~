/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <cmath>
#include <iostream>

#include "Teuchos_RCP.hpp"
#include "Teuchos_ScalarTraits.hpp"
#include "Epetra_Map.h"
#include "Epetra_MpiComm.h"
#include "Epetra_FEVector.h"

#include "typesInterface.hpp"
#include "pMapItem.h"
#include "pMapItemShare.h"
#include "pVect.hpp"
#include "pVectManip.hpp"
#include "pVectComm.hpp"
#include "pVectGlobalManip.hpp"

#include "epetraVector_to_pVect.hpp"


//! Run with two processors
int main(int argc, char *argv[])
{
  environment env(argc,argv);
  
  communicator world;
  Epetra_MpiComm epetraComm(MPI_COMM_WORLD);
  
  assert(world.size() == 2);
  
  //pMap 
  typedef pMapItemShare MAP;
  typedef pMap<MAP>     PMAP;
  
  PMAP pMapRef;
  
  
  //Epetra map
  int numMyElements;
  
  if(world.rank() == 0) { numMyElements = 3; }
  else                  { numMyElements = 2; }
  
  int myGlobalElements[numMyElements];
  
  if(world.rank() == 0)
  {
    myGlobalElements[0] = 2;
    myGlobalElements[1] = 3;
    myGlobalElements[2] = 4;
    
    pMapRef.resize(3);
    pMapRef(1) = MAP(pMapItemShare(1,3,0,false,true));
    pMapRef(2) = MAP(pMapItemShare(2,4,0,false,true));
    pMapRef(3) = MAP(pMapItemShare(3,5,0,false,true));
  }
  else
  {
    myGlobalElements[0] = 0;
    myGlobalElements[1] = 1;
    
    pMapRef.resize(2);
    pMapRef(1) = MAP(pMapItemShare(1,1,1,false,true));
    pMapRef(2) = MAP(pMapItemShare(2,2,1,false,true));
  }

  Epetra_Map epetraMap(-1,numMyElements,myGlobalElements,0,epetraComm);
  
  
  //Epetra vector
  Epetra_FEVector epetraVector(epetraMap);
  
  UInt indexRow[1];
  Real vect[1];
  
  if(world.rank() == 0)
  {
    indexRow[0] = 2; vect[0] = 2;  epetraVector.SumIntoGlobalValues(1, &indexRow[0], &vect[0]);
    indexRow[0] = 3; vect[0] = 3;  epetraVector.SumIntoGlobalValues(1, &indexRow[0], &vect[0]);
    indexRow[0] = 4; vect[0] = 4;  epetraVector.SumIntoGlobalValues(1, &indexRow[0], &vect[0]);
  }
  else
  {
    indexRow[0] = 0; vect[0] = 0;  epetraVector.SumIntoGlobalValues(1, &indexRow[0], &vect[0]);
    indexRow[0] = 1; vect[0] = 1;  epetraVector.SumIntoGlobalValues(1, &indexRow[0], &vect[0]);
  }
  
  epetraVector.GlobalAssemble();
  
  
  //Estract the map 
  epetraVector_to_pVect<MAP> converter(world);
  pVect<Real,MAP> mvect = converter.convert(epetraVector,pMapRef);
  
  if(world.rank() == 0)
  {
    cout << mvect << endl;
  }
}
