/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <cmath>
#include <iostream>

#include <boost/mpi.hpp>
#include <boost/mpi/environment.hpp>
#include <boost/mpi/communicator.hpp>

#include "pMapItem.h"
#include "pMapItemShare.h"

#include "geoShapes.h"
#include "meshInit3d.hpp"

#include "fePr2d.hpp"
#include "feRt0LT3d.hpp"
#include "feRt0LT3d_extern.hpp"

#include "dofMapStatic3d.hpp"
#include "elCardFeeder3d.hpp"
#include "feStaticField2d.hpp"
#include "feStaticField3d.hpp"
#include "feStaticField3dGlobalManip.hpp"

#include "operatorLA3d.hpp"
#include "opLA3dC.hpp"

#include "localMatrixLA3d.hpp"


using namespace std;
using namespace boost::mpi;
using namespace Teuchos;


int main(int argc, char *argv[])
{
  environment  env(argc,argv);
  communicator world;
  
  UInt pid = world.rank();

  assert(world.size() == 2);
  
  typedef pMapItemShare        PMAPTYPE;
  typedef feRt0LT3d<PMAPTYPE>  FIELD_FETYPE;
  typedef Real                 FIELD_DOFTYPE;
  typedef fePr2d<0,PMAPTYPE>   TEST_FETYPE;
  typedef Real                 TEST_DOFTYPE;

  typedef typename FIELD_FETYPE::GEOSHAPE  GEOSHAPE3D;
  typedef typename TEST_FETYPE::GEOSHAPE   GEOSHAPE2D;

  
  //Loading
  string meshFile = "../tests/morganaMeshes/mignon3dB.msh";
  
  meshInit3d<GEOSHAPE3D,PMAPTYPE,PMAPTYPE> init(world);
  init.gmMesh_to_stdB(meshFile);
  
  
  //Testing
  typedef feStaticField3d<FIELD_FETYPE,FIELD_DOFTYPE,dms3d_vectMajor, dms3d_allMode>    FIELD;
  typedef feStaticField2d<TEST_FETYPE, TEST_DOFTYPE, dms2d_vectMajor, dms2d_geoIdMode>  TEST;
  
  typedef typename FIELD::MESH3D     MESH3D;
  typedef typename FIELD::CONNECT3D  CONNECT3D;
  
  typedef typename TEST::MESH2D      MESH2D;
  typedef typename TEST::CONNECT2D   CONNECT2D;
  
  typedef opLA3dC<FIELD,TEST>        OPERATOR;
  
  typedef OPERATOR::FIELD_OPTIONS    FIELD_OPTIONS;
  typedef OPERATOR::TEST_OPTIONS     TEST_OPTIONS;
  
  typedef localMatrixLA3d<FIELD,TEST,intDefault,STANDARD,1> LOCALMATRIX;
  
  
  //Download data
  RCP<MESH2D>           grid2d = init.getGrid2d();
  RCP<MESH3D>           grid3d = init.getGrid3d();
  RCP<CONNECT2D> connectGrid2d = init.getConnectGrid2d();
  RCP<CONNECT3D> connectGrid3d = init.getConnectGrid3d();
  
  
  //RT0Cards---------------------------------------------------------
  typedef feRt0LT3d_extern<PMAPTYPE>  EXTERNAL;
  typedef typename EXTERNAL::FECARDS  FECARDS;
  
  EXTERNAL external(grid3d,connectGrid3d);
  external.setCommDev(world);
  
  FECARDS feCards = external.buildFeCards();
  
  
  //Operator
  FIELD_OPTIONS fieldOptions;
  TEST_OPTIONS  testOptions;
  
  testOptions.addGeoId(2);
  
  OPERATOR operatore(world,*grid3d,*connectGrid3d,*grid2d,*connectGrid2d);
  
  operatore.setFeCards_field(feCards);
  operatore.setOptions_field(fieldOptions);
  operatore.setOptions_test(testOptions);
  operatore.startup();
  
  if(pid == 1)
  {
    cout << "Faces" << endl;
    cout << grid3d->getFaces() << endl;
    
    UInt el = 1;
    
    operatore.setElement(el);
    operatore.setIJ(1,1,1,1);
    
    
    //Local matrix
    LOCALMATRIX localMatrixLA3d(operatore);
    
    sVect<UInt> indRow(localMatrixLA3d.numIndex_row());
    sVect<UInt> indCol(localMatrixLA3d.numIndex_col());
    sVect<Real> mat = localMatrixLA3d.matrix();
    
    localMatrixLA3d.indexG_col(indCol);
    localMatrixLA3d.indexG_row(indRow);
    
    cout << "numRows : " << localMatrixLA3d.numIndex_row() << endl;
    cout << "numCols : " << localMatrixLA3d.numIndex_col() << endl;
    
    cout << "rows : " << endl << indRow << endl;
    cout << "cols : " << endl << indCol << endl;
    cout << "matrix : " << endl << mat << endl;
  }
}
