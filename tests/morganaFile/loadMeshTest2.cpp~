/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <cmath>
#include <iostream>

#include <boost/mpi.hpp>
#include <boost/mpi/environment.hpp>
#include <boost/mpi/communicator.hpp>

#include "traitsMpiOptimization.h"
#include "point3d.h"
#include "simpleFormats.hpp"
#include "pVect.hpp"
#include "pMapItem.h"

#include "loadMesh.hpp"
#include "mesh3dGlobalManip.hpp"

// mpirun -np 2 ./bin/morgana

using namespace std;
using namespace boost::mpi;

int main(int argc, char *argv[])
{
  typedef linearTetra GEOSHAPE;
  typedef pMapItem    ELMAP;
  typedef pMapItem    NODEMAP;
  typedef loadMesh<linearTetra,ELMAP,NODEMAP>::NODESVECT  NODESVECT;
  typedef loadMesh<linearTetra,ELMAP,NODEMAP>::GRAPH3D    GRAPH3D;
  typedef loadMesh<linearTetra,ELMAP,NODEMAP>::GRAPH2D    GRAPH2D;
  
  environment  env(argc,argv);
  communicator world;
  
  string meshfile = "./tests/morganaMeshes/mignon3dB.msh";
  
  UInt pid      = world.rank();
  UInt printPid = 0;
  UInt numPids  = world.size();
  
  NODESVECT nodes;
  GRAPH3D   elements3d;
  GRAPH2D   elements2d;
  
  //Loading
  loadMesh<GEOSHAPE,ELMAP,NODEMAP> loader;
  loader.setParam(pid,printPid,numPids);
  loader.gmMesh(meshfile,nodes,elements3d,elements2d);
  
  //Grid buildup
  mesh3d<GEOSHAPE,ELMAP,NODEMAP> grid3d;
  grid3d.setElements(elements3d);
  grid3d.setNodes(nodes);
  grid3d.transferMap();
    
  if(pid == 1)
  {
    cout << "Elements --------------------------- " << endl;
    cout << grid3d.getElements() << endl << endl;
    
    cout << "Nodes ------------------------------ " << endl;
    cout << grid3d.getNodes() << endl;
    
    cout << "BElements --------------------------- " << endl;
    cout << elements2d << endl << endl;
  }
}

