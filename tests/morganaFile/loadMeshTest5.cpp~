/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <cmath>
#include <iostream>

#include <boost/mpi.hpp>
#include <boost/mpi/environment.hpp>
#include <boost/mpi/communicator.hpp>

#include "traitsMpiOptimization.h"
#include "point3d.h"
#include "simpleFormats.hpp"
#include "pVect.hpp"
#include "pMapItem.h"

#include "loadMesh.hpp"
#include "mesh3dGlobalManip.hpp"

// mpirun -np 2 ./bin/morgana

using namespace std;
using namespace boost::mpi;

int main(int argc, char *argv[])
{
  typedef linearTriangle GEOSHAPE;
  typedef pMapItem       ELMAP;
  typedef pMapItem       NODEMAP;
  typedef loadMesh<GEOSHAPE,ELMAP,NODEMAP>::NODESVECT  NODESVECT;
  typedef loadMesh<GEOSHAPE,ELMAP,NODEMAP>::GRAPH2D    GRAPH2D;
  typedef loadMesh<GEOSHAPE,ELMAP,NODEMAP>::GRAPH1D    GRAPH1D;
  
  environment  env(argc,argv);
  communicator world;
  
  string meshfile = "./geometries/rectangles2d/rettangoloA.msh";
  
  UInt pid      = world.rank();
  UInt printPid = 0;
  UInt numPids  = world.size();
  
  NODESVECT nodes;
  GRAPH2D   elements2d;
  GRAPH1D   elements1d;
  
  //Loading
  loadMesh<GEOSHAPE,ELMAP,NODEMAP> loader;
  loader.setParam(pid,printPid,numPids);
  loader.gmMesh(meshfile,nodes,elements2d,elements1d);
  
  //Grid buildup
  mesh2d<GEOSHAPE,ELMAP,NODEMAP> grid2d;
  grid2d.setElements(elements2d);
  grid2d.setNodes(nodes);
  grid2d.transferMap();
  
  cout << "Elements --------------------------- " << endl;
  cout << grid2d.getElements() << endl << endl;
    
  cout << "Nodes ------------------------------ " << endl;
  cout << grid2d.getNodes() << endl;

}

