/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <cmath>
#include <iostream>

#include <boost/mpi.hpp>
#include <boost/mpi/environment.hpp>
#include <boost/mpi/communicator.hpp>

#include "Epetra_ConfigDefs.h"
#include "Epetra_MpiComm.h"
#include "Epetra_Map.h"

#include "pMap.hpp"
#include "pMapItem.h"
#include "pMpiOptimization.hpp"
#include "pMapComm.hpp"
#include "pMapGlobalManip.h"

using namespace Teuchos;


//! Run with two processors
int main(int argc, char *argv[])
{
  //Comunication stuff
  environment  env(argc,argv);
  
  Epetra_MpiComm    epetraComm(MPI_COMM_WORLD);
  RCP<communicator> world(new communicator);
  
  assert(world->size() == 2);
  
  //Common data
  typedef pMap<pMapItem> OBJ;
  
  pMapItem  item;
  RCP<OBJ>  sMap(new OBJ);
  RCP<OBJ>  rMap(new OBJ);
  
  if(world->rank() == 0)
  {  
    item.setLid(1); item.setGid(1); sMap->push_back(item);
    item.setLid(2); item.setGid(2); sMap->push_back(item);
    item.setLid(3); item.setGid(3); sMap->push_back(item);
    item.setLid(4); item.setGid(4); sMap->push_back(item);
    item.setLid(5); item.setGid(5); sMap->push_back(item);
  }
  
  if(world->rank() == 1)
  {    
    item.setLid(1); item.setGid(6);  sMap->push_back(item);
    item.setLid(2); item.setGid(7);  sMap->push_back(item);
    item.setLid(3); item.setGid(8);  sMap->push_back(item);
    item.setLid(4); item.setGid(9);  sMap->push_back(item);
    item.setLid(5); item.setGid(10); sMap->push_back(item);
  }
  
  
  //Map translation
  RCP<Epetra_Map> epetraMap;
  
  pMapGlobalManip<pMapItem> manipulator(world);
  manipulator.exportEpetraMap(sMap,epetraMap,epetraComm,1);
  manipulator.importEpetraMap(epetraMap,rMap);
  
  world->barrier();
  
  if(world->rank() == 0)
  {   
    cout << "IMPORTED MAP" << endl;
    cout << *rMap << endl;
  }
  
  world->barrier();
  
  if(world->rank() == 1)
  {   
    cout << "IMPORTED MAP" << endl;
    cout << *rMap << endl;
  }
}


/* pid 0
EPETRA MAP
Epetra::Map
Number of Global Elements  = 10
Number of Global Points    = 10
Maximum of all GIDs        = 10
Minimum of all GIDs        = 1
Index Base                 = 1
Constant Element Size      = 1

Number of Local Elements   = 5
Number of Local Points     = 5
Maximum of my GIDs         = 5
Minimum of my GIDs         = 1

         MyPID           Local Index        Global Index  
             0                 0                 1    
             0                 1                 2    
             0                 2                 3    
             0                 3                 4    
             0                 4                 5    

IMPORTED MAP
pid: 0 lid: 1 gid: 1
pid: 0 lid: 2 gid: 2
pid: 0 lid: 3 gid: 3
pid: 0 lid: 4 gid: 4
pid: 0 lid: 5 gid: 5

EPETRA MAP
Epetra::Map
Number of Local Elements   = 5
Number of Local Points     = 5
Maximum of my GIDs         = 10
Minimum of my GIDs         = 6

         MyPID           Local Index        Global Index  
             1                 0                 6    
             1                 1                 7    
             1                 2                 8    
             1                 3                 9    
             1                 4                10    
*/


/* pid 1
EPETRA MAP
Epetra::Map
Number of Global Elements  = 10
Number of Global Points    = 10
Maximum of all GIDs        = 10
Minimum of all GIDs        = 1
Index Base                 = 1
Constant Element Size      = 1

Number of Local Elements   = 5
Number of Local Points     = 5
Maximum of my GIDs         = 5
Minimum of my GIDs         = 1

         MyPID           Local Index        Global Index  
             0                 0                 1    
             0                 1                 2    
             0                 2                 3    
             0                 3                 4    
             0                 4                 5    

EPETRA MAP
Epetra::Map
Number of Local Elements   = 5
Number of Local Points     = 5
Maximum of my GIDs         = 10
Minimum of my GIDs         = 6

         MyPID           Local Index        Global Index  
             1                 0                 6    
             1                 1                 7    
             1                 2                 8    
             1                 3                 9    
             1                 4                10    

IMPORTED MAP
pid: 0 lid: 1 gid: 6
pid: 0 lid: 2 gid: 7
pid: 0 lid: 3 gid: 8
pid: 0 lid: 4 gid: 9
pid: 0 lid: 5 gid: 10
*/
