/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

#include <cmath>
#include <iostream>

#include "typesInterface.h"
#include "pMapItemShare.h"
#include "pVect.hpp"
#include "pVectManip.hpp"
#include "pVectComm.hpp"
#include "pVectGlobalManip.hpp"

using namespace Teuchos;


//! Run with two processors
int main(int argc, char *argv[])
{
  environment  env(argc,argv);
  RCP<communicator> world(new communicator);
  
  typedef Real          DATA;
  typedef pMapItem      MAPTYPE;
  typedef pVect<DATA,MAPTYPE> PVECT;
  
  PVECT sVector, rVector;    
  MAPTYPE item;
  
  
  if(world->rank() == 0)
  {
    item.setPid(0); item.setLid(1); item.setGid(5); sVector.push_back(item, 15, false);
    item.setPid(0); item.setLid(2); item.setGid(6); sVector.push_back(item, 16, false);
    item.setPid(1); item.setLid(3); item.setGid(3); sVector.push_back(item, 13, false);
    item.setPid(1); item.setLid(4); item.setGid(4); sVector.push_back(item, 14, false);
    
    sVector.updateFinder();

  }
  
  if(world->rank() == 1)
  {
    item.setPid(1); item.setLid(1); item.setGid(1); sVector.push_back(item, 11, false);
    item.setPid(1); item.setLid(2); item.setGid(2); sVector.push_back(item, 12, false);
    item.setPid(1); item.setLid(3); item.setGid(3); sVector.push_back(item, 13, false);
    item.setPid(1); item.setLid(4); item.setGid(4); sVector.push_back(item, 14, false);
    
    sVector.updateFinder();
  }
  
  pVectGlobalManip<DATA,MAPTYPE> vectorManip(world);
  cout << " check : " << vectorManip.checkConsistency(sVector) << endl;
}
