/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


#ifndef FEDYNAMICFIELD3DGLOBALMANIP_HPP
#define FEDYNAMICFIELD3DGLOBALMANIP_HPP

#include "pMapItem.h"
#include "pMapItemShare.h"

#include "feDynamicField3d.hpp"

using namespace std;


//_________________________________________________________________________________________________
// SERVO-SPECIALIZATION
//-------------------------------------------------------------------------------------------------

/*! Dynamic Field 3d Global Manipulator - empty general class  */
template<typename PMAPTYPE, typename FETYPE, typename DOFTYPE, dmd3d_order ORDER = dmd3d_vectMajor, dmd3d_mode MODE = dmd3d_standard>
class fdf3dGlobalManip;



//_________________________________________________________________________________________________
// PMAPITEM
//-------------------------------------------------------------------------------------------------

/*! Dynamic Field 3d Global Manipulator - \c pMapItem specialization */
template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
class fdf3dGlobalManip<pMapItem,FETYPE,DOFTYPE,ORDER,MODE>
{
    /*! @name Typedefs */ //@{
  public:
    typedef pMapItem                                    PMAPTYPE;
    typedef dofMapDynamic3d_options                     OPTIONS;
    typedef feDynamicField3d<FETYPE,DOFTYPE,ORDER,MODE> FIELD;
    typedef typename FIELD::MESH3D                      MESH3D;
    typedef typename FIELD::CONNECT3D                   CONNECT3D;
    typedef typename FIELD::DOFVECT                     DOFVECT;
    typedef typename FETYPE::ELCARD                     ELCARD;
    typedef typename FETYPE::FECARD                     FECARD;
    typedef pVect<FECARD,PMAPTYPE>                      FECARDS;
    //@}
  
    /*! @name Internal data and links */ //@{
  public:
    bool commDevLoaded;
    Teuchos::RCP<communicator> commDev;
    //@}
    
    /*! @name Constructors and set functions */ //@{
  public:
    fdf3dGlobalManip();
    fdf3dGlobalManip(const Teuchos::RCP<communicator> & CommDev);
    fdf3dGlobalManip(communicator & CommDev);
    void setCommunicator(const Teuchos::RCP<communicator> & CommDev);
    void setCommunicator(communicator & CommDev);
    //@}
    
    /*! @name Operator functions */ //@{
  public:
    void changeGrid(const Teuchos::RCP<MESH3D> & newGrid, const Teuchos::RCP<CONNECT3D> & newConnect, const Teuchos::RCP<OPTIONS> & options, const Teuchos::RCP<FIELD> & Field) const;
    void changeGrid(MESH3D & newGrid, CONNECT3D & newConnect, OPTIONS & options, FIELD & Field) const;
    //@}
};


template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
fdf3dGlobalManip<pMapItem,FETYPE,DOFTYPE,ORDER,MODE>::
fdf3dGlobalManip()
{
  commDevLoaded = false;
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
fdf3dGlobalManip<pMapItem,FETYPE,DOFTYPE,ORDER,MODE>::
fdf3dGlobalManip(const Teuchos::RCP<communicator> & CommDev)
{
  commDevLoaded = true;
  commDev = CommDev;
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
fdf3dGlobalManip<pMapItem,FETYPE,DOFTYPE,ORDER,MODE>::
fdf3dGlobalManip(communicator & CommDev)
{
  commDevLoaded = true;
  commDev = Teuchos::rcpFromRef(CommDev);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItem,FETYPE,DOFTYPE,ORDER,MODE>::
setCommunicator(const Teuchos::RCP<communicator> & CommDev)
{
  commDevLoaded = true;
  commDev = CommDev;
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItem,FETYPE,DOFTYPE,ORDER,MODE>::
setCommunicator(communicator & CommDev)
{
  commDevLoaded = true;
  commDev = Teuchos::rcpFromRef(CommDev);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItem,FETYPE,DOFTYPE,ORDER,MODE>::
changeGrid(const Teuchos::RCP<MESH3D> & newGrid, const Teuchos::RCP<CONNECT3D> & newConnect, const Teuchos::RCP<OPTIONS> & options, const Teuchos::RCP<FIELD> & Field) const
{
  assert(commDevLoaded);
  assert(newGrid->getElements().colIsLocal());
  
  //Create the new field
  FIELD newField3d;
  newField3d.setCommunicator(commDev);
  newField3d.setGeometry(newGrid,newConnect);
  newField3d.setOptions(options);
  
  //Remap the feCards
  pMap<PMAPTYPE> newElMap = newGrid->getElements().getRowMap();
  FECARDS         feCards = Field->getFeCards();
  
  pVectGlobalManip<FECARD,PMAPTYPE> feCardsManip(commDev);
  feCardsManip.changeMap(feCards,newElMap);
  
  newField3d.setFeCards(feCards);
  
  //Startup
  newField3d.startup();
  
  //New map - old vector
  pMap<PMAPTYPE> newDofMap  = newField3d.getDofVect().getMapRef();
  DOFVECT        oldDofVect = Field->getDofVect();
  
  //Cheking
  pVectGlobalManip<DOFTYPE,PMAPTYPE> dofVectManip(commDev);
  pMapGlobalManip<PMAPTYPE>          dofMapManip(commDev);
  
  assert(dofVectManip.sizeG(oldDofVect) == dofMapManip.sizeG(newDofMap));
  
  //New dofVector
  dofVectManip.changeMap(oldDofVect,newDofMap);
  
  //Loading the new dofVector
  newField3d.setDofVect(oldDofVect);
  *Field = newField3d;
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItem,FETYPE,DOFTYPE,ORDER,MODE>::
changeGrid(MESH3D & newGrid, CONNECT3D & newConnect, OPTIONS & options, FIELD & Field) const
{
  assert(commDevLoaded);
  assert(newGrid.getElements().colIsLocal());
  
  //Create the new field
  FIELD newField3d;
  newField3d.setCommunicator(commDev);
  newField3d.setGeometry(newGrid,newConnect);
  newField3d.setOptions(options);
  
  //Remap the feCards
  pMap<PMAPTYPE> newElMap = newGrid.getElements().getRowMap();
  FECARDS         feCards = Field.getFeCards();
  
  pVectGlobalManip<FECARD,PMAPTYPE> feCardsManip(commDev);
  
  assert(feCardsManip.check(feCards));
  feCardsManip.changeMap(feCards,newElMap); 
  
  newField3d.setFeCards(feCards);  
  
  //Startup
  newField3d.startup();
  
  //New map - old vector
  pMap<PMAPTYPE> newDofMap  = newField3d.getDofVect().getMapRef();
  DOFVECT        oldDofVect = Field.getDofVect();
  
  //Cheking
  pVectGlobalManip<DOFTYPE,PMAPTYPE> dofVectManip(commDev);
  pMapGlobalManip<PMAPTYPE>          dofMapManip(commDev);
  
  assert(dofVectManip.sizeG(oldDofVect) == dofMapManip.sizeG(newDofMap)); 
  
  //New dofVector
  dofVectManip.changeMap(oldDofVect,newDofMap);  

  //Loading the new dofVector
  newField3d.setDofVect(oldDofVect);
  Field = newField3d;
}




//_________________________________________________________________________________________________
// PMAPITEMSHARE
//-------------------------------------------------------------------------------------------------

/*! Dynamic Field 3d Global Manipulator - \c pMapItemShare specialization */
template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
class fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>
{
    /*! @name Typedefs */ //@{
  public:
    typedef pMapItemShare                               PMAPTYPE;
    typedef feDynamicField3d<FETYPE,DOFTYPE,ORDER,MODE> FIELD;
    typedef pMap<pMapItemSendRecv>                      SENDRECV;
    typedef dofMapDynamic3d_options                     OPTIONS;
    typedef typename FIELD::MESH3D                      MESH3D;
    typedef typename FIELD::CONNECT3D                   CONNECT3D;
    typedef typename FIELD::DOFVECT                     DOFVECT;
    typedef typename FETYPE::ELCARD                     ELCARD;
    typedef typename FETYPE::FECARD                     FECARD;
    typedef pVect<FECARD,PMAPTYPE>                      FECARDS;
    //@}
  
    /*! @name Internal data and links */ //@{
  public:
    bool commDevLoaded;
    Teuchos::RCP<communicator> commDev;
    //@}
    
    /*! @name Constructors and set functions */ //@{
  public:
    fdf3dGlobalManip();
    fdf3dGlobalManip(const Teuchos::RCP<communicator> & CommDev);
    fdf3dGlobalManip(communicator & CommDev);
    void setCommunicator(const Teuchos::RCP<communicator> & CommDev);
    void setCommunicator(communicator & CommDev);
    //@}
    
    /*! @name Operator functions */ //@{
  public:
    void changeGrid(const Teuchos::RCP<MESH3D> & newGrid, const Teuchos::RCP<CONNECT3D> & newConnect, const Teuchos::RCP<OPTIONS> & options, const Teuchos::RCP<FIELD> & Field) const;
    void changeGrid(MESH3D & newGrid, CONNECT3D & newConnect, OPTIONS & options, FIELD & Field) const;
    void createSendRecvMap(const Teuchos::RCP<FIELD> & Field, Teuchos::RCP<SENDRECV> & mapSend, Teuchos::RCP<SENDRECV> & mapRecv) const;
    void createSendRecvMap(const FIELD & Field, SENDRECV & mapSend, SENDRECV & mapRecv) const;
    void updateData(const Teuchos::RCP<FIELD> & Field, const Teuchos::RCP<SENDRECV> & mapSend) const;
    void updateData(FIELD & Field, SENDRECV & mapSend) const;
    void updateData(const Teuchos::RCP<FIELD> & Field, const Teuchos::RCP<SENDRECV> & mapSend, const Teuchos::RCP<SENDRECV> & mapRecv) const;
    void updateData(FIELD & Field, SENDRECV & mapSend, SENDRECV & mapRecv) const;
    //@}
};


template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
fdf3dGlobalManip()
{
  commDevLoaded = false;
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
fdf3dGlobalManip(const Teuchos::RCP<communicator> & CommDev)
{
  commDevLoaded = true;
  commDev = CommDev;
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
fdf3dGlobalManip(communicator & CommDev)
{
  commDevLoaded = true;
  commDev = Teuchos::rcpFromRef(CommDev);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
setCommunicator(const Teuchos::RCP<communicator> & CommDev)
{
  commDevLoaded = true;
  commDev = CommDev;
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
setCommunicator(communicator & CommDev)
{
  commDevLoaded = true;
  commDev = Teuchos::rcpFromRef(CommDev);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
changeGrid(const Teuchos::RCP<MESH3D> & newGrid, const Teuchos::RCP<CONNECT3D> & newConnect, const Teuchos::RCP<OPTIONS> & options, const Teuchos::RCP<FIELD> & Field) const
{
  assert(commDevLoaded);
  
  //Create the new field
  FIELD newField3d;
  newField3d.setCommunicator(commDev);
  newField3d.setGeometry(newGrid,newConnect);
  newField3d.setOptions(options);
  
  //Remap the feCards
  pMap<PMAPTYPE> newElMap = newGrid->getElements().getRowMap();
  FECARDS         feCards = Field->getFeCards();
  
  pVectGlobalManip<FECARD,PMAPTYPE> feCardsManip(commDev);
  feCardsManip.changeMap(feCards,newElMap);
  
  newField3d.setFeCards(feCards);
  
  //Startup
  newField3d.startup();
  
  //New map - old vector
  pMap<PMAPTYPE> newDofMap  = newField3d.getDofVect().getMapRef();
  DOFVECT        oldDofVect = Field->getDofVect();
  
  //Cheking
  pVectGlobalManip<DOFTYPE,PMAPTYPE> dofVectManip(commDev);
  pMapGlobalManip<PMAPTYPE>          dofMapManip(commDev);
  
  assert(dofVectManip.sizeG(oldDofVect) == dofMapManip.sizeG(newDofMap));
  
  //New dofVector
  dofVectManip.changeMap(oldDofVect,newDofMap);
  
  //Loading the new dofVector
  newField3d.setDofVect(oldDofVect);
  *Field = newField3d;
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
changeGrid(MESH3D & newGrid, CONNECT3D & newConnect, OPTIONS & options, FIELD & Field) const
{
  if(commDev->rank() == 1)
  {
    cout << "nodes" << endl;
    cout << newGrid.getNodes() << endl;
    cout << "edges" << endl;
    cout << newGrid.getEdges() << endl;
  }
  
  
  
  
  
  assert(commDevLoaded);
  
  //Create the new field
  FIELD newField3d;
  newField3d.setCommunicator(commDev);
  newField3d.setGeometry(newGrid,newConnect);
  newField3d.setOptions(options);
  
  //Remap the feCards
  pMap<PMAPTYPE> newElMap = newGrid.getElements().getRowMap();
  FECARDS         feCards = Field.getFeCards();
  
  pVectGlobalManip<FECARD,PMAPTYPE> feCardsManip(commDev);
  
  assert(feCardsManip.check(feCards));
  feCardsManip.changeMap(feCards,newElMap); 
  
  newField3d.setFeCards(feCards);  
  
  //Startup
  //newField3d.startup();
  
  //New map - old vector
  /*pMap<PMAPTYPE> newDofMap  = newField3d.getDofVect().getMapRef();
  DOFVECT        oldDofVect = Field.getDofVect();
  
  //Cheking
  pVectGlobalManip<DOFTYPE,PMAPTYPE> dofVectManip(commDev);
  pMapGlobalManip<PMAPTYPE>          dofMapManip(commDev);
  
  assert(dofVectManip.sizeG(oldDofVect) == dofMapManip.sizeG(newDofMap)); 
  
  //New dofVector
  dofVectManip.changeMap(oldDofVect,newDofMap);  

  //Loading the new dofVector
  newField3d.setDofVect(oldDofVect);
  Field = newField3d;*/
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
createSendRecvMap(const Teuchos::RCP<FIELD> & Field, Teuchos::RCP<SENDRECV> & mapSend, Teuchos::RCP<SENDRECV> & mapRecv) const
{
  assert(commDevLoaded);
  
  pMapGlobalManip<PMAPTYPE> mapManipulator(commDev);
  mapManipulator.createSendRecvMap(Field.getDofVect().getMapRcp(), mapSend, mapRecv);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
createSendRecvMap(const FIELD & Field, SENDRECV & mapSend, SENDRECV & mapRecv) const
{
  assert(commDevLoaded);
  
  pMapGlobalManip<PMAPTYPE> mapManipulator(commDev);
  mapManipulator.createSendRecvMap(Field.getDofVect().getMapRef(), mapSend, mapRecv);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
updateData(const Teuchos::RCP<FIELD> & Field, const Teuchos::RCP<SENDRECV> & mapSend) const
{
  //Checks
  assert(commDevLoaded);
    
  //Update the data
  pVect<DOFTYPE,pMapItemShare> dofsVect = Field->getDofVect();
  
  pVectGlobalManip<DOFTYPE,pMapItemShare> manipulator(commDev);
  manipulator.updateData(dofsVect,*mapSend);
  
  //Reload the dofs
  Field.setDofVect(dofsVect);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
updateData(FIELD & Field, SENDRECV & mapSend) const
{
  //Checks
  assert(commDevLoaded);
  
  //Update the data
  pVect<DOFTYPE,pMapItemShare> dofsVect = Field.getDofVect();
  
  pVectGlobalManip<DOFTYPE,pMapItemShare> manipulator(commDev);
  manipulator.updateData(dofsVect,mapSend);
  
  //Reload the dofs
  Field.setDofVect(dofsVect);
}
 
template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
updateData(const Teuchos::RCP<FIELD> & Field, const Teuchos::RCP<SENDRECV> & mapSend, const Teuchos::RCP<SENDRECV> & mapRecv) const
{
  //Checks
  assert(commDevLoaded);
  pMapGlobalManip<pMapItemSendRecv> cheker(commDev);
  cheker.check(mapSend,mapRecv);
  
  //Update the data
  pVect<DOFTYPE,pMapItemShare> dofsVect = Field->getDofVect();
  
  pVectGlobalManip<DOFTYPE,pMapItemShare> manipulator(commDev);
  manipulator.updateData(dofsVect,*mapSend,*mapRecv);
  
  //Reload the dofs
  Field.setDofVect(dofsVect);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
void
fdf3dGlobalManip<pMapItemShare,FETYPE,DOFTYPE,ORDER,MODE>::
updateData(FIELD & Field, SENDRECV & mapSend, SENDRECV & mapRecv) const
{
  //Checks
  assert(commDevLoaded);
  pMapGlobalManip<pMapItemSendRecv> cheker(commDev);
  cheker.check(mapSend,mapRecv);
  
  //Update the data
  pVect<DOFTYPE,pMapItemShare> dofsVect = Field.getDofVect();
  
  pVectGlobalManip<DOFTYPE,pMapItemShare> manipulator(commDev);
  manipulator.updateData(dofsVect,mapSend,mapRecv);
  
  //Reload the dofs
  Field.setDofVect(dofsVect);
}



//_________________________________________________________________________________________________
// SUMMARY CLASS
//-------------------------------------------------------------------------------------------------

/*! Interface class for the manipulation of Dynamic Field 3d */
template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER = dmd3d_vectMajor, dmd3d_mode MODE = dmd3d_standard>
class feDynamicField3dGlobalManip : public fdf3dGlobalManip<typename FETYPE::FETYPE_PMAPTYPE,FETYPE,DOFTYPE,ORDER,MODE>
{
     /*! @name Typedefs */ //@{
  public:
    typedef typename FETYPE::FETYPE_PMAPTYPE PMAPTYPE;
    typedef feDynamicField3d<FETYPE,DOFTYPE,ORDER,MODE> FIELD;
    typedef typename FETYPE::GEOSHAPE  GEOSHAPE;
    //@}
    
    /*! @name Constructors */ //@{
  public:
    feDynamicField3dGlobalManip();
    feDynamicField3dGlobalManip(const Teuchos::RCP<communicator> & CommDev);
    feDynamicField3dGlobalManip(communicator & CommDev);
    //@}
};


template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
feDynamicField3dGlobalManip<FETYPE,DOFTYPE,ORDER,MODE>::
feDynamicField3dGlobalManip() : fdf3dGlobalManip<typename FETYPE::FETYPE_PMAPTYPE,FETYPE,DOFTYPE,ORDER,MODE>()
{
  assert(staticAssert<GEOSHAPE::nDim == 3>::returnValue);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
feDynamicField3dGlobalManip<FETYPE,DOFTYPE,ORDER,MODE>::
feDynamicField3dGlobalManip(const Teuchos::RCP<communicator> & CommDev) : fdf3dGlobalManip<typename FETYPE::FETYPE_PMAPTYPE,FETYPE,DOFTYPE,ORDER,MODE>(CommDev)
{
  assert(staticAssert<GEOSHAPE::nDim == 3>::returnValue);
}

template<typename FETYPE, typename DOFTYPE, dmd3d_order ORDER, dmd3d_mode MODE>
feDynamicField3dGlobalManip<FETYPE,DOFTYPE,ORDER,MODE>::
feDynamicField3dGlobalManip(communicator & CommDev) : fdf3dGlobalManip<typename FETYPE::FETYPE_PMAPTYPE,FETYPE,DOFTYPE,ORDER,MODE>(CommDev)
{
  assert(staticAssert<GEOSHAPE::nDim == 3>::returnValue);
}
    

#endif
