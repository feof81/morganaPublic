/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
This file is part of Morgana.
Author: Andrea Villa, andrea.villa81@fastwebnet.it

Morgana is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

Morgana is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with Morgana. If not, see <http://www.gnu.org/licenses/>.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/


#ifndef FEHY2D_HPP
#define FEHY2D_HPP

#include "feHY2d_card.h"
#include "morganaFields.h"
#include "morganaGeometry.hpp"
#include "morganaTypes.hpp"
#include "feDynamicDofCard2d.h"
#include "elCard2d.hpp"
#include "feDynamicDofCard2d.h"


/*! The hybrid finite element */
template<typename PMAPTYPE>
class feHY2d
{
    /*! @name Typedefs */ //@{
  public:
    typedef PMAPTYPE                    FETYPE_PMAPTYPE;
    typedef Real                        BASETYPE;
    typedef linearTriangle              GEOSHAPE;
    typedef feHY2d_card                 FECARD;
    typedef elCard2d<GEOSHAPE,PMAPTYPE> ELCARD;
    typedef feDynamicDofCard2d          DOFCARD;
    //@}
    
    /*! @name Static flags */ //@{
  public:
    static const FEClass     feClass     = feDynamic;
    static const FEGridType  feGridType  = primal;
    static const FEBaseType  feBaseType  = scalar;
    static const FELabel     feLabel     = FE_HY_2d;
    static const FEBaseLabel feBaseLabel = BL_HY_2d;
    //@}
    
    /*! @name Static numbers */ //@{
  public:
    static const UInt dim     = 2;
    static const bool isNodal = false;
    //@}
    
    /*! @name Links and flags */ //@{
  public:
    bool elCardLoaded;
    bool feCardLoaded;
    FECARD FeCard;
    ELCARD ElCard;
    //@}
    
    /*! @name Constructors and setting functions */ //@{
  public:
    feHY2d();
    feHY2d(const FECARD & FECard, const ELCARD & ELCard);
    void setCards(const FECARD & FECard, const ELCARD & ELCard);
    //@}
    
    /*! @name Info functions */ //@{
  public:
    UInt           getNumBasis() const;
    sVect<DOFCARD> getDofCards() const;
    UInt           getMaxLevVertex() const;
    UInt           getMaxLevEdge() const;
    UInt           getMaxLevVolume() const;
    //@}
    
    /*! @name Eval functions */ //@{
  public:
    void localEval(const point3d & Y, sVect<BASETYPE> & val) const;
    void localGrad(const point3d & Y, sVect<BASETYPE> & gradX, sVect<BASETYPE> & gradY, sVect<BASETYPE> & gradZ) const;
    void globalEval(const point3d & Y, sVect<BASETYPE> & val) const;
    void globalGrad(const point3d & Y, sVect<BASETYPE> & gradX, sVect<BASETYPE> & gradY, sVect<BASETYPE> & gradZ) const;
    //@}
};



//_________________________________________________________________________________________________
// IMPLEMENTATION
//-------------------------------------------------------------------------------------------------
template<typename PMAPTYPE>
feHY2d<PMAPTYPE>::
feHY2d()
{
  elCardLoaded = false;
  feCardLoaded = false;
}

template<typename PMAPTYPE>
feHY2d<PMAPTYPE>::
feHY2d(const FECARD & FECard, const ELCARD & ELCard)
{
  elCardLoaded = true;
  feCardLoaded = true;
  
  FeCard = FECard;
  ElCard = ELCard;
}

template<typename PMAPTYPE>
void
feHY2d<PMAPTYPE>::
setCards(const FECARD & FECard, const ELCARD & ELCard)
{
  elCardLoaded = true;
  feCardLoaded = true;
  
  ElCard = ELCard;
  FeCard = FECard;
}

template<typename PMAPTYPE>
UInt
feHY2d<PMAPTYPE>::
getNumBasis() const
{
  assert(elCardLoaded);
  assert(feCardLoaded);
  
  return( UInt(FeCard.getActiveEdges()(1)) +
          UInt(FeCard.getActiveEdges()(2)) +
	  UInt(FeCard.getActiveEdges()(3)) );
}

template<typename PMAPTYPE>
sVect<typename feHY2d<PMAPTYPE>::DOFCARD>
feHY2d<PMAPTYPE>::
getDofCards() const
{
  assert(elCardLoaded);
  assert(feCardLoaded);
  
  sVect<DOFCARD> out;
  
  for(UInt i=1; i <= 3; ++i)
  {
    if(FeCard.getActiveEdges()(i))
    { out.push_back(DOFCARD(EDGE,1,i)); }
  }
  
  return(out);
}

template<typename PMAPTYPE>
UInt
feHY2d<PMAPTYPE>::
getMaxLevVertex() const
{
  assert(elCardLoaded);
  assert(feCardLoaded);
  
  return(0);
}

template<typename PMAPTYPE>
UInt
feHY2d<PMAPTYPE>::
getMaxLevEdge() const
{
  assert(elCardLoaded);
  assert(feCardLoaded);
  
  return(1);
}

template<typename PMAPTYPE>
UInt
feHY2d<PMAPTYPE>::
getMaxLevVolume() const
{
  assert(elCardLoaded);
  assert(feCardLoaded);
  
  return(0);
}

template<typename PMAPTYPE>
void
feHY2d<PMAPTYPE>::
localEval(const point3d & Y, sVect<BASETYPE> & val) const
{
  assert(elCardLoaded);
  assert(feCardLoaded);
  assert(Y.getX() == Y.getX());
  assert(val.size() == getNumBasis());
  
  //Distance info
  sVect<bool> act(3);
  act(1) = (Y.getZ() <=   geoToll ) &&  (Y.getZ() >= (-geoToll))      &&
           (Y.getX() >= (-geoToll)) &&  (Y.getX() <= (1.0 + geoToll)) &&
           (Y.getY() <=   geoToll ) &&  (Y.getY() >= (-geoToll));
	   
  act(2) = (Y.getY() <= geoToll)    &&  (Y.getY() >= (-geoToll))      &&
           (Y.getX() >= (-geoToll)) &&  (Y.getX() <= (1.0 + geoToll)) &&
           (Y.getY() >= (-geoToll)) &&  (Y.getY() <= (1.0 + geoToll)) &&
           ( (Y.getX() + Y.getY() ) <= (1.0 + geoToll) )    &&
           ( (Y.getX() + Y.getY() ) >= (1.0 - geoToll) );
  
  act(3) = (Y.getZ() <=   geoToll ) &&  (Y.getZ() >= (-geoToll))      &&
           (Y.getY() >= (-geoToll)) &&  (Y.getY() <= (1.0 + geoToll)) &&
           (Y.getX() <=   geoToll ) &&  (Y.getX() >= (-geoToll));
   
  UInt k=1;
  
  if(FeCard.getActiveEdges()(1)) {val(k) = UInt(act(1)); ++k;}
  if(FeCard.getActiveEdges()(2)) {val(k) = UInt(act(2)); ++k;}
  if(FeCard.getActiveEdges()(3)) {val(k) = UInt(act(3)); ++k;}
	   
  assert((k-1) == getNumBasis());
}

template<typename PMAPTYPE>
void
feHY2d<PMAPTYPE>::
localGrad(const point3d & Y, sVect<BASETYPE> & gradX, sVect<BASETYPE> & gradY, sVect<BASETYPE> & gradZ) const
{
  assert(elCardLoaded);
  assert(feCardLoaded);
  assert(Y.getX() == Y.getX());
  assert(gradX.size() == getNumBasis());
  assert(gradY.size() == getNumBasis());
  assert(gradZ.size() == getNumBasis());
  
  for(UInt i=1; i <= getNumBasis(); ++i)
  {
    gradX(i) = 0;
    gradY(i) = 0;
    gradZ(i) = 0;
  }
}

template<typename PMAPTYPE>
void
feHY2d<PMAPTYPE>::
globalEval(const point3d & Y, sVect<BASETYPE> & val) const
{
  assert(elCardLoaded);
  assert(feCardLoaded);
  assert(Y.getX() == Y.getX());
  assert(val.size() == getNumBasis());
  
  localEval(Y,val);
}

template<typename PMAPTYPE>
void
feHY2d<PMAPTYPE>::
globalGrad(const point3d & Y, sVect<BASETYPE> & gradX, sVect<BASETYPE> & gradY, sVect<BASETYPE> & gradZ) const
{
  assert(elCardLoaded);
  assert(feCardLoaded);
  assert(Y.getX() == Y.getX());
  assert(gradX.size() == getNumBasis());
  assert(gradY.size() == getNumBasis());
  assert(gradZ.size() == getNumBasis());
  
  for(UInt i=1; i <= getNumBasis(); ++i)
  {
    gradX(i) = 0;
    gradY(i) = 0;
    gradZ(i) = 0;
  }
}


#endif
